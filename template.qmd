---
title: "CEVE 101: Project 03"
author: "Lizzy Sullo (ls110)" # CHANGE THIS
date: "2024-11-25"

# do not change anything below this line
engine: julia
code-annotations: hover
format: 
    #html: default
    docx: default
---

We begin by loading the required packages.

```{julia}
using Revise                      # <1>
using RainwaterHarvesting         # <2>
```

1. `Revise` allows us to update code without restarting Julia.
2. We load the `RainwaterHarvesting` package that contains our simulation tools.

### Setting the file path

Next, we specify the path to the rainfall data file and read it in.

```{julia}
filepath = "data/2.txt" # <1>   
rainfall_data = RainfallData(filepath) # <2>
```

1. This is the path to the rainfall data file for the station of interest.
2. This creates a `RainfallData` object containing the rainfall data for the specified station.

If we dig under the hood a bit, we can see that there are two main pieces of information:

- `station_info`: a dictionary containing information about the station, such as its name and location.
- `annual_data`: a dictionary mapping years to `AnnualRainfallData` objects, each containing the date and precipitation data for a given year.

### Plotting the Data

We can plot the data for one or all of the years to verify that it looks correct.

```{julia}
plot(rainfall_data) # <1>
```

1. This `plot` function is defined in [viz.jl](./RainwaterHarvesting/src/viz.jl) and is a thin wrapper around the Plots.jl package.

### Discussion

The available data is sufficient for a somewhat meaningful risk assessments. Every year has data with mostly filled out data, as seen through the VS code dataset. Though there is some data missing, I believe each year has a sufficient amount of data to give a good analysis. Therefore, each year can be evaluated. However, some of the years tended have a little bit of less data, but not too much less. This lack of data leads me to understand why some of the years that had a drought aren't extremely recognizable of the graph. In general, the graph trends mostly follow the drought year, but there are some years that seem like they should be showing more of a drought. For example, there was a large drought in 1983, but it looks like less of a drought year than 1981 (which was a much less smaller drought year). This lack of data could be due to  instrument issues, human error, a power outage and many more things. An increased amount of missing data during drought years could be a result of the side effects of a drought (lack of personnel to run the data collection, power outage and facility inefficiency due to the drought). This inconsistency in the graph proves that you must look into the data that your graph is giving and the meaning behind it. You cannot follow results that don't account for these discrepencies. However, you can follow it to understand a general trend.  

## Understanding the Theoretical Model

Let's explore the model that simulates the rainwater harvesting system.

### Mass Balance Equation

There are currently some assumtions in this theoretical model. One major assumption is that water is only consumed from the tank after 150 days as it is assumed they are able to get water during rainy season in the first 150 days. This, however, can lead to a many issues as it does not acocunt for the fact that there may be a drought or lack of water during the first 150 days. Even if they are getting some sort of rainwater, it is very unlikely that they are consistently getting enough to supply each household every day. Additionally, it is very possible. Another assumption is that each household consumes 74.1 liters. I know that in my household I believe we use much more than 74.1 liters of water. 
I think it would be helpful to account for how many people are in the household when calculating the assumption. I would also add in a certain amount of days that have some use of the water tank during the rainy season.
My new consumption would be modeled as 20x+20 for each day of the year greater than the 150th day (x is the number of people in the family and the additional 20 accounts for water that is jointly used by the family and more is not added). The second one would be and 74.1/7 for every day of the year before the 150th day (this is taking into account times that don't rain much in the rainy season which is assumed to be about 1/7th of the time).


## Model Implementation and Testing

### Defining the Model Parameters




```{julia}
#| output: false
param = ModelParameters(          # <1>
    runoff_coefficient=0.85,      # <2>
    roof_area_m2=70.0,            # <3>
    first_flush_mm=2.0,           # <4>
    tank_capacity_L=16000.0       # <5>
)
```

1. This creates a `ModelParameters` object with the specified parameters.
2. The runoff coefficient ($\eta$) is a measure of how much of the rain that falls on the roof ends up in the tank.
3. The roof area ($A$) is the area of the roof that the rain falls on.
4. The first flush volume ($V_f$) is the volume of rain that is discarded because it is dirty.
5. The tank capacity ($V_\text{max}$) is the maximum volume of the tank.

I chose to modify the roof area to 70 m2. I did this because making this parameter higher led to less failures. Adjusting the volume of the tank did not help there be less failures even when I doubled the tank size. I chose to raise the roof area to 70 m2 because it was close to the lowest value that allowed there to be 0 failures. As I predicted, raising the roof area by this amount made it where the tank reached max volume later in the year (the original parameters made it reach max volume in March where the new parametersmade it reach max volume closer to June and the raise in tank volume was a little more gradual relative to the tank capacity). As expected, the daily rainfall did not change as these parameters could not effect this. 

### Running the Simulation for One Year

Let's run the model for the year 1981.

```{julia}
rainfall_1981 = rainfall_data.annual_data[1981]    # <1>
results_1981 = run_timesteps(rainfall_1981, param) # <2>
p1 = plot(results_1981)                                 # <3>
```

1. We select the annual rainfall data for the year 1981.
2. We run the simulation for the year 1981.
3. We plot the results, again using a `plot` function defined in [viz.jl](./RainwaterHarvesting/src/viz.jl).

To compare rainfall and tank volume:

```{julia}
p2 = plot(rainfall_1981)
plot(p2, p1, layout=(2, 1), size=(1000, 700), link=:x)
```



### Reliability Analysis

We can run simulations for all years, one at a time, and then check how many times the tank runs dry.
You can run simulations for all years at once with the following code:

```{julia}
all_years = sort(collect(keys(rainfall_data.annual_data)))          # <1>
all_results = [run_timesteps(rainfall_data.annual_data[year], param) for year in all_years]   # <2>
any_failures = [!isempty(result.failure_dates) for result in all_results]  # <3>
println("Number of years with failures: ", sum(any_failures), " out of ", length(all_years))  # <4>
```

1. We get all the years in order.
2. We run the simulation for each year.
3. We check if any failures occurred.
4. We print the number of years with failures and the total number of years.


As stated before, changing the area of the roof to 70 m2 made this system very reliable with no failures in 50 years. There is always going to be a small chance of failure, but this system has proven that this chance is very small. 
One limitation with this model is that it doesn't account for the fact that it just runs the reliability analysis for a year one at a time and checks if the year has a failure. However, if you are calculating it over a year, there is definietly a chance that it could be dry/overflow in that year but not include that in the results because it averages out to not be a failure. For instance, the first 4 months of the year could have very little rainfall and the next 6 could have a lot of rain, making the results look like there was no dry period even though there was. This could be fixed by looking at the time frame on a smaller scale. Instead of looking at it once a year, one could look at it once a month to help make very unusual short amounts of time be more likely to be detected as a failure. 
